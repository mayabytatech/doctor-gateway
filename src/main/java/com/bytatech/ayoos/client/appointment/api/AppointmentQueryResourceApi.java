/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.ayoos.client.appointment.api;

import com.bytatech.ayoos.client.appointment.model.Appointment;
import com.bytatech.ayoos.client.appointment.model.AppointmentDTO;
import com.bytatech.ayoos.client.appointment.model.AppointmentDetails;
import com.bytatech.ayoos.client.appointment.model.ConsultationDetails;
import com.bytatech.ayoos.client.appointment.model.DataResponse;
import com.bytatech.ayoos.client.appointment.model.DoctorInfo;
import com.bytatech.ayoos.client.appointment.model.HistoricTaskInstanceQueryRequest;
import com.bytatech.ayoos.client.appointment.model.OpenAppointmentResponse;
import com.bytatech.ayoos.client.appointment.model.PaymentInfo;
import com.bytatech.ayoos.client.appointment.model.RestVariable;
import com.bytatech.ayoos.client.appointment.model.Slot;
import com.bytatech.ayoos.client.appointment.model.TaskQueryRequest;
import com.bytatech.ayoos.client.appointment.model.TaskResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-16T11:24:38.008+05:30[Asia/Calcutta]")

@Api(value = "AppointmentQueryResource", description = "the AppointmentQueryResource API")
public interface AppointmentQueryResourceApi {

    @ApiOperation(value = "getAllAppointments", nickname = "getAllAppointmentsUsingGET", notes = "", response = AppointmentDTO.class, responseContainer = "List", tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppointmentDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/appointments",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<AppointmentDTO>> getAllAppointmentsUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) Long offset,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,@ApiParam(value = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "") @Valid @RequestParam(value = "paged", required = false) Boolean paged,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort,@ApiParam(value = "") @Valid @RequestParam(value = "sort.sorted", required = false) Boolean sortSorted,@ApiParam(value = "") @Valid @RequestParam(value = "sort.unsorted", required = false) Boolean sortUnsorted,@ApiParam(value = "") @Valid @RequestParam(value = "unpaged", required = false) Boolean unpaged);


    @ApiOperation(value = "getAllProcessAttributes", nickname = "getAllProcessAttributesUsingGET", notes = "", response = RestVariable.class, responseContainer = "List", tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/appointmentAttributes/{processInstanceId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<RestVariable>> getAllProcessAttributesUsingGET(@ApiParam(value = "processInstanceId",required=true) @PathVariable("processInstanceId") String processInstanceId,@ApiParam(value = "scope") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "getAppointmentDetails", nickname = "getAppointmentDetailsUsingGET", notes = "", response = AppointmentDetails.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppointmentDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/appointment-details/{processInstanceId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<AppointmentDetails> getAppointmentDetailsUsingGET(@ApiParam(value = "processInstanceId",required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "getAppointmentInfo", nickname = "getAppointmentInfoUsingGET", notes = "", response = Appointment.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Appointment.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/appointmentInfo/{processInstanceId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Appointment> getAppointmentInfoUsingGET(@ApiParam(value = "processInstanceId",required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "getAppointment", nickname = "getAppointmentUsingGET", notes = "", response = AppointmentDTO.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppointmentDTO.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/appointments/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<AppointmentDTO> getAppointmentUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getDoctorInfo", nickname = "getDoctorInfoUsingGET", notes = "", response = DoctorInfo.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DoctorInfo.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/doctoInfo/{processInstanceId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<DoctorInfo> getDoctorInfoUsingGET(@ApiParam(value = "processInstanceId",required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "getHistoricTask", nickname = "getHistoricTaskUsingPOST", notes = "", response = DataResponse.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DataResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/getHistoricTask",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<DataResponse> getHistoricTaskUsingPOST(@ApiParam(value = "request" ,required=true )  @Valid @RequestBody HistoricTaskInstanceQueryRequest historicTaskInstanceQueryRequest);


    @ApiOperation(value = "getMyAppointments", nickname = "getMyAppointmentsUsingGET", notes = "", response = OpenAppointmentResponse.class, responseContainer = "List", tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OpenAppointmentResponse.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/myAppointments",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<OpenAppointmentResponse>> getMyAppointmentsUsingGET(@ApiParam(value = "If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned.") @Valid @RequestParam(value = "active", required = false) Boolean active,@ApiParam(value = "assignee") @Valid @RequestParam(value = "assignee", required = false) String assignee,@ApiParam(value = "assigneeLike") @Valid @RequestParam(value = "assigneeLike", required = false) String assigneeLike,@ApiParam(value = "candidateGroup") @Valid @RequestParam(value = "candidateGroup", required = false) String candidateGroup,@ApiParam(value = "candidateGroups") @Valid @RequestParam(value = "candidateGroups", required = false) String candidateGroups,@ApiParam(value = "Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups).") @Valid @RequestParam(value = "candidateOrAssigned", required = false) String candidateOrAssigned,@ApiParam(value = "candidateUser") @Valid @RequestParam(value = "candidateUser", required = false) String candidateUser,@ApiParam(value = "Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). ") @Valid @RequestParam(value = "category", required = false) String category,@ApiParam(value = "Only return tasks which are created after the given date.") @Valid @RequestParam(value = "createdAfter", required = false) String createdAfter,@ApiParam(value = "Only return tasks which are created before the given date.") @Valid @RequestParam(value = "createdBefore", required = false) String createdBefore,@ApiParam(value = "Only return tasks which are created on the given date.") @Valid @RequestParam(value = "createdOn", required = false) String createdOn,@ApiParam(value = "delegationState") @Valid @RequestParam(value = "delegationState", required = false) String delegationState,@ApiParam(value = "description") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "Only return tasks which are due after the given date.") @Valid @RequestParam(value = "dueAfter", required = false) String dueAfter,@ApiParam(value = "Only return tasks which are due before the given date.") @Valid @RequestParam(value = "dueBefore", required = false) String dueBefore,@ApiParam(value = "Only return tasks which are due on the given date.") @Valid @RequestParam(value = "dueOn", required = false) String dueOn,@ApiParam(value = "Only return tasks that are not a subtask of another task.") @Valid @RequestParam(value = "excludeSubTasks", required = false) Boolean excludeSubTasks,@ApiParam(value = "Only return tasks which are part of the execution with the given id.") @Valid @RequestParam(value = "executionId", required = false) String executionId,@ApiParam(value = "Indication to include process variables in the result.") @Valid @RequestParam(value = "includeProcessVariables", required = false) Boolean includeProcessVariables,@ApiParam(value = "Indication to include task local variables in the result.") @Valid @RequestParam(value = "includeTaskLocalVariables", required = false) Boolean includeTaskLocalVariables,@ApiParam(value = "involvedUser") @Valid @RequestParam(value = "involvedUser", required = false) String involvedUser,@ApiParam(value = "maximumPriority") @Valid @RequestParam(value = "maximumPriority", required = false) String maximumPriority,@ApiParam(value = "minimumPriority") @Valid @RequestParam(value = "minimumPriority", required = false) String minimumPriority,@ApiParam(value = "name") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "nameLike") @Valid @RequestParam(value = "nameLike", required = false) String nameLike,@ApiParam(value = "owner") @Valid @RequestParam(value = "owner", required = false) String owner,@ApiParam(value = "ownerLike") @Valid @RequestParam(value = "ownerLike", required = false) String ownerLike,@ApiParam(value = "priority") @Valid @RequestParam(value = "priority", required = false) String priority,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with the given id.") @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with the given key.") @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with a key like the given value.") @Valid @RequestParam(value = "processDefinitionKeyLike", required = false) String processDefinitionKeyLike,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with the given name.") @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with a name like the given value.") @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike,@ApiParam(value = "processInstanceBusinessKey") @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey,@ApiParam(value = "processInstanceBusinessKeyLike") @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike,@ApiParam(value = "processInstanceId") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "taskDefinitionKey") @Valid @RequestParam(value = "taskDefinitionKey", required = false) String taskDefinitionKey,@ApiParam(value = "taskDefinitionKeyLike") @Valid @RequestParam(value = "taskDefinitionKeyLike", required = false) String taskDefinitionKeyLike,@ApiParam(value = "Only return tasks with the given tenantId.") @Valid @RequestParam(value = "tenantId", required = false) String tenantId,@ApiParam(value = "Only return tasks with a tenantId like the given value.") @Valid @RequestParam(value = "tenantIdLike", required = false) String tenantIdLike,@ApiParam(value = "unassigned") @Valid @RequestParam(value = "unassigned", required = false) String unassigned,@ApiParam(value = "Only return tasks which don�t have a due date. The property is ignored if the value is false.") @Valid @RequestParam(value = "withoutDueDate", required = false) Boolean withoutDueDate,@ApiParam(value = "If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored.") @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId);


    @ApiOperation(value = "getPaymentInfo", nickname = "getPaymentInfoUsingGET", notes = "", response = PaymentInfo.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentInfo.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/paymentInfo/{taskId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<PaymentInfo> getPaymentInfoUsingGET(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "getQueryResult", nickname = "getQueryResultUsingPOST", notes = "", response = DataResponse.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DataResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/tasks",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<DataResponse> getQueryResultUsingPOST(@ApiParam(value = "taskQueryRequest" ,required=true )  @Valid @RequestBody TaskQueryRequest taskQueryRequest);


    @ApiOperation(value = "getSlotInfo", nickname = "getSlotInfoUsingGET", notes = "", response = Slot.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Slot.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/slotInfo/{processInstanceId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Slot> getSlotInfoUsingGET(@ApiParam(value = "processInstanceId",required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "getSymptoms", nickname = "getSymptomsUsingGET", notes = "", response = ConsultationDetails.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ConsultationDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/symptoms/{taskId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ConsultationDetails> getSymptomsUsingGET(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "getTaskFormProperties", nickname = "getTaskFormPropertiesUsingGET", notes = "", response = DataResponse.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DataResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/history",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<DataResponse> getTaskFormPropertiesUsingGET(@ApiParam(value = "activityInstanceId") @Valid @RequestParam(value = "activityInstanceId", required = false) String activityInstanceId,@ApiParam(value = "executionId") @Valid @RequestParam(value = "executionId", required = false) String executionId,@ApiParam(value = "id") @Valid @RequestParam(value = "id", required = false) String id,@ApiParam(value = "processInstanceId") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "selectOnlyFormProperties") @Valid @RequestParam(value = "selectOnlyFormProperties", required = false) Boolean selectOnlyFormProperties,@ApiParam(value = "selectOnlyVariableUpdates") @Valid @RequestParam(value = "selectOnlyVariableUpdates", required = false) Boolean selectOnlyVariableUpdates,@ApiParam(value = "taskId") @Valid @RequestParam(value = "taskId", required = false) String taskId);


    @ApiOperation(value = "getTaskInstanceVariable", nickname = "getTaskInstanceVariableUsingGET", notes = "", response = RestVariable.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/tasks/{taskId}/{variableName}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<RestVariable> getTaskInstanceVariableUsingGET(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "variableName",required=true) @PathVariable("variableName") String variableName,@ApiParam(value = "scope") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "getTask", nickname = "getTaskUsingGET", notes = "", response = TaskResponse.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TaskResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/tasks/{taskId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<TaskResponse> getTaskUsingGET(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "getTaskVariables", nickname = "getTaskVariablesUsingGET", notes = "", response = RestVariable.class, responseContainer = "List", tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/tasks/{taskId}/variables",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<RestVariable>> getTaskVariablesUsingGET(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "getTasks", nickname = "getTasksUsingGET", notes = "", response = DataResponse.class, tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DataResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/tasks",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<DataResponse> getTasksUsingGET(@ApiParam(value = "If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned.") @Valid @RequestParam(value = "active", required = false) Boolean active,@ApiParam(value = "assignee") @Valid @RequestParam(value = "assignee", required = false) String assignee,@ApiParam(value = "assigneeLike") @Valid @RequestParam(value = "assigneeLike", required = false) String assigneeLike,@ApiParam(value = "candidateGroup") @Valid @RequestParam(value = "candidateGroup", required = false) String candidateGroup,@ApiParam(value = "candidateGroups") @Valid @RequestParam(value = "candidateGroups", required = false) String candidateGroups,@ApiParam(value = "Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups).") @Valid @RequestParam(value = "candidateOrAssigned", required = false) String candidateOrAssigned,@ApiParam(value = "candidateUser") @Valid @RequestParam(value = "candidateUser", required = false) String candidateUser,@ApiParam(value = "Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). ") @Valid @RequestParam(value = "category", required = false) String category,@ApiParam(value = "Only return tasks which are created after the given date.") @Valid @RequestParam(value = "createdAfter", required = false) String createdAfter,@ApiParam(value = "Only return tasks which are created before the given date.") @Valid @RequestParam(value = "createdBefore", required = false) String createdBefore,@ApiParam(value = "Only return tasks which are created on the given date.") @Valid @RequestParam(value = "createdOn", required = false) String createdOn,@ApiParam(value = "delegationState") @Valid @RequestParam(value = "delegationState", required = false) String delegationState,@ApiParam(value = "description") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "Only return tasks which are due after the given date.") @Valid @RequestParam(value = "dueAfter", required = false) String dueAfter,@ApiParam(value = "Only return tasks which are due before the given date.") @Valid @RequestParam(value = "dueBefore", required = false) String dueBefore,@ApiParam(value = "Only return tasks which are due on the given date.") @Valid @RequestParam(value = "dueOn", required = false) String dueOn,@ApiParam(value = "Only return tasks that are not a subtask of another task.") @Valid @RequestParam(value = "excludeSubTasks", required = false) Boolean excludeSubTasks,@ApiParam(value = "Only return tasks which are part of the execution with the given id.") @Valid @RequestParam(value = "executionId", required = false) String executionId,@ApiParam(value = "Indication to include process variables in the result.") @Valid @RequestParam(value = "includeProcessVariables", required = false) Boolean includeProcessVariables,@ApiParam(value = "Indication to include task local variables in the result.") @Valid @RequestParam(value = "includeTaskLocalVariables", required = false) Boolean includeTaskLocalVariables,@ApiParam(value = "involvedUser") @Valid @RequestParam(value = "involvedUser", required = false) String involvedUser,@ApiParam(value = "maximumPriority") @Valid @RequestParam(value = "maximumPriority", required = false) String maximumPriority,@ApiParam(value = "minimumPriority") @Valid @RequestParam(value = "minimumPriority", required = false) String minimumPriority,@ApiParam(value = "name") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "nameLike") @Valid @RequestParam(value = "nameLike", required = false) String nameLike,@ApiParam(value = "owner") @Valid @RequestParam(value = "owner", required = false) String owner,@ApiParam(value = "ownerLike") @Valid @RequestParam(value = "ownerLike", required = false) String ownerLike,@ApiParam(value = "priority") @Valid @RequestParam(value = "priority", required = false) String priority,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with the given id.") @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with the given key.") @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with a key like the given value.") @Valid @RequestParam(value = "processDefinitionKeyLike", required = false) String processDefinitionKeyLike,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with the given name.") @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with a name like the given value.") @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike,@ApiParam(value = "processInstanceBusinessKey") @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey,@ApiParam(value = "processInstanceBusinessKeyLike") @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike,@ApiParam(value = "processInstanceId") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "taskDefinitionKey") @Valid @RequestParam(value = "taskDefinitionKey", required = false) String taskDefinitionKey,@ApiParam(value = "taskDefinitionKeyLike") @Valid @RequestParam(value = "taskDefinitionKeyLike", required = false) String taskDefinitionKeyLike,@ApiParam(value = "Only return tasks with the given tenantId.") @Valid @RequestParam(value = "tenantId", required = false) String tenantId,@ApiParam(value = "Only return tasks with a tenantId like the given value.") @Valid @RequestParam(value = "tenantIdLike", required = false) String tenantIdLike,@ApiParam(value = "unassigned") @Valid @RequestParam(value = "unassigned", required = false) String unassigned,@ApiParam(value = "Only return tasks which don�t have a due date. The property is ignored if the value is false.") @Valid @RequestParam(value = "withoutDueDate", required = false) Boolean withoutDueDate,@ApiParam(value = "If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored.") @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId);


    @ApiOperation(value = "searchAppointments", nickname = "searchAppointmentsUsingGET", notes = "", response = AppointmentDTO.class, responseContainer = "List", tags={ "appointment-query-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppointmentDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/query/_search/appointments",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<AppointmentDTO>> searchAppointmentsUsingGET(@NotNull @ApiParam(value = "query", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) Long offset,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,@ApiParam(value = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "") @Valid @RequestParam(value = "paged", required = false) Boolean paged,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort,@ApiParam(value = "") @Valid @RequestParam(value = "sort.sorted", required = false) Boolean sortSorted,@ApiParam(value = "") @Valid @RequestParam(value = "sort.unsorted", required = false) Boolean sortUnsorted,@ApiParam(value = "") @Valid @RequestParam(value = "unpaged", required = false) Boolean unpaged);

}
