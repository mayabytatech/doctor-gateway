/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.ayoos.client.consultation.api;

import com.bytatech.ayoos.client.consultation.model.ConsultationRequest;
import com.bytatech.ayoos.client.consultation.model.DefaultInfoRequest;
import com.bytatech.ayoos.client.consultation.model.InitiateMedicalSummaryRequest;
import java.util.List;
import com.bytatech.ayoos.client.consultation.model.ParamedicalExaminationRequest;
import com.bytatech.ayoos.client.consultation.model.PrescriptionRequest;
import org.springframework.core.io.Resource;
import com.bytatech.ayoos.client.consultation.model.SigningCredentials;
import com.bytatech.ayoos.client.consultation.model.SiteBodyCreate;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-16T08:48:40.336+05:30[Asia/Kolkata]")

@Api(value = "ConsultationCommandResource", description = "the ConsultationCommandResource API")
public interface ConsultationCommandResourceApi {

    @ApiOperation(value = "collectConsultationInformations", nickname = "collectConsultationInformationsUsingPOST", notes = "", tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/collectConsultationInfo/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> collectConsultationInformationsUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "consultationRequest" ,required=true )  @Valid @RequestBody ConsultationRequest consultationRequest);


    @ApiOperation(value = "collectInformations", nickname = "collectInformationsUsingPOST", notes = "", tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/collectDefaultInfo/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> collectInformationsUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "defaultInfoRequest" ,required=true )  @Valid @RequestBody DefaultInfoRequest defaultInfoRequest);


    @ApiOperation(value = "collectParamedicalExaminationInformations", nickname = "collectParamedicalExaminationInformationsUsingPOST", notes = "", tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/collectParamedicalExaminationInfo/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> collectParamedicalExaminationInformationsUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "paramedicalExxminationRequest" ,required=true )  @Valid @RequestBody ParamedicalExaminationRequest paramedicalExaminationRequest);


    @ApiOperation(value = "collectPrescriptionInformations", nickname = "collectPrescriptionInformationsUsingPOST", notes = "", tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/collectPrescriptionInfo/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> collectPrescriptionInformationsUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "prescriptionRequest" ,required=true )  @Valid @RequestBody List<PrescriptionRequest> prescriptionRequest);


    @ApiOperation(value = "createSite", nickname = "createSiteUsingPOST", notes = "", response = String.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/createSite",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<String> createSiteUsingPOST(@ApiParam(value = "siteBodyCreate" ,required=true )  @Valid @RequestBody SiteBodyCreate siteBodyCreate);


    @ApiOperation(value = "getPatientDMSID", nickname = "getPatientDMSIDUsingGET", notes = "", response = String.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/dmsid/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<String> getPatientDMSIDUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "initiateConsultationSummary", nickname = "initiateConsultationSummaryUsingPOST", notes = "", response = String.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/initiateConsultation",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<String> initiateConsultationSummaryUsingPOST(@ApiParam(value = "medicalSummaryRequest" ,required=true )  @Valid @RequestBody InitiateMedicalSummaryRequest initiateMedicalSummaryRequest);


    @ApiOperation(value = "setPrescriptionRequestList", nickname = "setPrescriptionRequestListUsingPOST", notes = "", tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/setList",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> setPrescriptionRequestListUsingPOST(@ApiParam(value = "prescriptionRequest" ,required=true )  @Valid @RequestBody PrescriptionRequest prescriptionRequest);


    @ApiOperation(value = "sign", nickname = "signUsingPOST", notes = "", response = String.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/sign",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<String> signUsingPOST(@ApiParam(value = "signingCredentials" ,required=true )  @Valid @RequestBody SigningCredentials signingCredentials);


    @ApiOperation(value = "uploadFile", nickname = "uploadFileUsingPOST", notes = "", response = String.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/command/uploadFile",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<String> uploadFileUsingPOST(@ApiParam(value = "file detail") @RequestParam("file") MultipartFile file);

}
